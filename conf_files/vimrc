" Good Habits
" disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" pathogen
execute pathogen#infect()


set nocompatible

" Sets how many lines of history VIM has to remember
set history=500

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" Avoid garbled characters in Chinese language windows OS
let $LANG='en'
set langmenu=en
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
set wildignore+=.git\*,.hg\*,.svn\*

"Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Add a bit extra margin to the left
set foldcolumn=0
set so=4

" Enable syntax highlighting
syntax enable

set t_Co=256
" Set extra options when running in GUI mode
if has("gui_running")
	set guioptions=0
	set guitablabel=%M\ %t
	set guifont=Source\ Code\ Pro\ for\ Powerline\ Regular\ 13
endif

" set background=dark
" colorscheme desert
" colorscheme Tomorrow-Night-Eighties
" colorscheme gruvbox
" colorscheme dracula
" set background=light
" colorscheme solarized

syntax on
filetype plugin indent on
" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac


" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile


" Use spaces instead of tabs
" set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines
set colorcolumn=81
highlight ColorColumn ctermbg=magenta guibg=Magenta
" created problem in vimdiff
" set cursorline

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk


" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Format the status line
set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

" Remap VIM 0 to first non-blank character
map 0 ^

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
	exe "normal mz"
	%s/\s\+$//ge
	exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()
" autocmd BufWrite *.java :call DeleteTrailingWS()
" autocmd BufWrite *.js :call DeleteTrailingWS()
" autocmd BufWrite *.css :call DeleteTrailingWS()
" autocmd BufWrite *.html :call DeleteTrailingWS()
" autocmd BufWrite *.scss :call DeleteTrailingWS()
" autocmd BufWrite *.php :call DeleteTrailingWS()
" autocmd BufWrite *.phtml :call DeleteTrailingWS()
" autocmd BufWrite *.less :call DeleteTrailingWS()

" Make VIM remember position in file after reopen
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

set relativenumber
set number

" use this to change case of first char or previous word
nnoremap <leader>c b~w

" trim spaces in the end
map <F6> :%s/ *$//g<CR>:w<CR>:nohl<CR>

" ===================================
" Plugins related config
" ===================================

" nerdtree
let g:nerdtree_tabs_open_on_console_startup=0
let g:nerdtree_tabs_open_on_gui_startup=0
let g:NERDTreeWinPos = "left"
let NERDTreeShowHidden=0
let NERDTreeIgnore = ['\.pyc$', '__pycache__']
let g:NERDTreeWinSize=25
map <leader>nn :NERDTreeTabsToggle<cr>
map <leader>nb :NERDTreeFromBookmark
map <leader>nf :NERDTreeTabsFind<cr>

" delimitMate
let g:delimitMate_expand_cr = 1
let g:delimitMate_autoclose = 1
"let g:delimitMate_excluded_ft = 'mail,xml,html,phtml'
au FileType xml,html,phtml,php,xhtml,js let b:delimitMate_matchpairs = "(:),[:],{:}"

" indentLine
" vertical line indentation
let g:indentLine_enabled = 0
let g:indentLine_color_term = 4
" let g:indentLine_color_gui = '#09AA08'
let g:indentLine_char = '┆'
" set list lcs=tab:\|.trail:<

" YankRing
let g:yankring_history_dir = '~/.vim/temp_dirs/'

" BufExplorer
let g:bufExplorerDefaultHelp=0
let g:bufExplorerShowRelativePath=1
let g:bufExplorerFindActive=1
let g:bufExplorerSortBy='name'
map <leader>o :BufExplorer<cr>

" Ctrl P
let g:ctrlp_working_path_mode = 0
let g:ctrlp_map = '<c-f>'
map <leader>j :CtrlP<cr>
map <c-b> :CtrlPBuffer<cr>
let g:ctrlp_max_height = 20
let g:ctrlp_custom_ignore = 'node_modules\|^\.DS_Store\|^\.git\|^\.coffee\|target\|dist'

" Zencoding
let g:user_emmet_mode='a'    "enable all function in all mode.

" Syntastic
" Python
let g:syntastic_python_checkers=['pylint']
" Javascript
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exe = '$(npm bin)/eslint'
let g:syntastic_python_python_exec = '/usr/bin/python3'
" Java
let g:syntastic_java_checkstyle_classpath = [$HOME . '/.vim/temp_dirs']

" Airline
" let g:airline_theme = "gruvbox"
" let g:airline_theme = "tomorrow"
" let g:airline_theme = "solarized"
let g:airline#extensions#tabline#tab_nr_type = 1
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline_powerline_fonts = 1

" Surround plugin
vmap Si S(i_<esc>f)
au FileType mako vmap Si S"i${ _(<esc>2f"a) }<esc>

" JavaImp
let g:JavaImpDataDir = $HOME . "/.vim/temp_dirs/JavaImp"
let g:JavaImpPaths = $HOME . "/.vim/temp_dirs/JavaImp," .
			\ $HOME . "/data/workspace/gasjobber-server/src/main/java," .
			\ $HOME . "/data/workspace/gasjobber-server/target/jarfiles," .
			\ $HOME . "/.vim/temp_dirs/JavaImp/jmplst,"
source ~/.vim/filetypes.vim
map <leader>i :JavaImp<cr>:JIS<cr>
map <leader>gs :InsertBothGetterSetter<cr>


" deploy to wildfly
map <leader>wd :!mvn wildfly:deploy<cr>
map <leader>wc :!mvn clean compile<cr>

" remove search highlight
map <leader>nh :nohl<cr>

" autoclose html tags
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.php,*.xml"

" disable bell
set belloff=all
set mouse=

"YCM settings
"if !exists("g:ycm_semantic_triggers")
"  let g:ycm_semantic_triggers = {}
"endif
"let g:ycm_semantic_triggers['typescript'] = ['.']
"let g:ycm_autoclose_preview_window_after_insertion = 1
"let g:ycm_autoclose_preview_window_after_completion = 1

let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

autocmd FileType java setlocal omnifunc=javacomplete#Complete

" supertab
let g:SuperTabClosePreviewOnPopupClose = 1
let g:SuperTabDefaultCompletionType = "<c-n>"

" conceal characters for javascript
let g:javascript_conceal_function             = "ƒ"
let g:javascript_conceal_null                 = "ø"
"let g:javascript_conceal_this                 = "@"
"let g:javascript_conceal_return               = "⇚"
"let g:javascript_conceal_undefined            = "¿"
"let g:javascript_conceal_NaN                  = "ℕ"
let g:javascript_conceal_prototype            = "¶"
let g:javascript_conceal_static               = "•"
let g:javascript_conceal_super                = "Ω"
"let g:javascript_conceal_arrow_function       = "⇒"

let g:jsx_ext_required = 0

"buffer related mappings
" This allows buffers to be hidden if you've modified a buffer.
" This is almost a must if you wish to use buffers in this way.
set hidden

" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :enew<cr>

" Move to the next buffer
nmap <leader>l :bnext<CR>

" Move to the previous buffer
nmap <leader>h :bprevious<CR>

" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>bq :bp <BAR> bd #<CR>

" Show all open buffers and their status
nmap <leader>bl :ls<CR>

let g:move_key_modifier = 'C'
